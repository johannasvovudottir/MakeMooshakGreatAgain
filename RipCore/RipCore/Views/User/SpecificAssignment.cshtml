@model RipCore.Models.ViewModels.AssignmentViewModel
<h3>@Html.DisplayFor(modelItem => Model.Title)</h3>
<table>
    <tbody>
        <tr>
            <td class="topRow">Date Created: @Model.DateCreated</td>
            <td class="topRow">Weight: @Model.Weight</td>
        </tr>
        <tr>
            <td class="bottomRow">Due Date: @Model.DueDate</td>
            <td></td>
        </tr>
    </tbody>
</table>
@if (Model.IsTeacher == true)
{
    <h4>@Html.ActionLink("Edit", "Edit", new { id = Model.ID, @class = "btn btn-default" })</h4>
}
@Styles.Render("~/Content/tabs.css")

<div class="container">
    <ul class="nav nav-tabs">
        <li class="active"><a data-toggle="tab" href="#home">Project Description</a></li>
        <li><a data-toggle="tab" href="#menu1">Submit in Code Editor</a></li>
    </ul>

    <div class="tab-content">
        <div id="home" class="tab-pane fade in active">
            <h3>Project Description</h3>
            <div id="description">
                @Html.DisplayFor(modelItem => Model.Description)
                @Html.HiddenFor(model => model.ID)
                @Html.HiddenFor(model => model.Title)
                @Html.HiddenFor(model => model.CourseID)

                @for (int i = 1; i < Model.Milestones.Count; i++)
                {
                    <h4>@i. @Html.DisplayFor(model => model.Milestones[i].Title) (@Html.DisplayFor(model => model.Milestones[i].Weight)%)</h4>
                    <p>@Html.DisplayFor(model => model.Milestones[i].Description)</p>

                }
            </div>
            @if (!Model.IsTeacher)
            {
                using (Html.BeginForm("SubmitSolution", "Solution", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.HiddenFor(modelItem => Model.Description)
                    @Html.HiddenFor(model => model.ID)
                    @Html.HiddenFor(model => model.Title)
                    @Html.HiddenFor(model => model.CourseID)
                    <div class="form-group">
                        @Html.LabelFor(model => model.milestoneSubmissionID, "Milestone", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.milestoneSubmissionID, Model.milestoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.milestoneSubmissionID, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.File, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(model => model.File, new { type = "file" })
                            @Html.ValidationMessageFor(model => model.File, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Save" id="fileButton" class="btn btn-default" />
                        </div>
                    </div>
                }
            }
        </div>
        <div id="menu1" class="tab-pane fade">
            <h3>Menu 2</h3>
            @if (!Model.IsTeacher)
            {
                using (Html.BeginForm("SubmitSolution", "Solution", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    <section>
                        <div id="editor">
                            function foo(items) {
                            var x = "All this is syntax highlighted";
                            return x;
                            }
                        </div>
                    </section>
                    @Html.HiddenFor(model => model.ID)
                    @Html.HiddenFor(model => model.Title)
                    @Html.HiddenFor(model => model.CourseID)
                    @Html.HiddenFor(model => model.Solution)
                    <div class="form-group">
                        @Html.LabelFor(model => model.milestoneSubmissionID, "Milestone", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.milestoneSubmissionID, Model.milestoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.milestoneSubmissionID, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Save" id="solutionButton" class="btn btn-default" />
                        </div>
                    </div>
                }

            }
        </div>
    </div>
</div>



<script type="text/javascript">
    var editor = ace.edit("editor");
    var ccppMode = require("ace/mode/c_cpp").Mode;
    editor.getSession().setMode(new ccppMode());
</script>

<script type="text/javascript">
    $('#solutionButton').click(function () {
        $('#File').val("");
    }
    );
</script>

<script type="text/javascript">
    $('#fileButton').click(function () {
        $('#Solution').val("");
    }
    );
</script>

