@model RipCore.Models.ViewModels.AssignmentViewModel
<h3>@Html.DisplayFor(modelItem => Model.Title)</h3>



<div class="row">
    <div class="col-md-6">
        <div class="col-md-10">
            @Html.LabelFor(model => model.DateCreated, @Resources.Resources.DateCreated, htmlAttributes: new { @class = "control-label col-md-4" })
            @Html.DisplayFor(model => model.DateCreated)
        </div>
        <div class="col-md-10">
            @Html.LabelFor(model => model.DueDate, @Resources.Resources.DueDate, htmlAttributes: new { @class = "control-label col-md-4" })
            @Html.DisplayFor(model => model.DueDate)
        </div>
    </div>

    <div class="col-md-6">
        <div class="col-md-10">
            @Html.LabelFor(model => model.Weight, @Resources.Resources.Weight, htmlAttributes: new { @class = "control-label col-md-4" })
            @Html.DisplayFor(model => model.Weight)

        </div>
        <div class="col-md-10">
            @Html.LabelFor(model => model.ProgrammingLanguage, @Resources.Resources.Language, htmlAttributes: new { @class = "control-label col-md-4" })
            @Html.DisplayFor(model => model.ProgrammingLanguage)
        </div>
    </div>
</div>



@Styles.Render("~/Content/tabs.css")

<div class="container">
    <ul class="nav nav-tabs">
        <li class="active"><a data-toggle="tab" href="#home">@Resources.Resources.Description</a></li>
        <li><a data-toggle="tab" href="#menu1">@Resources.Resources.editorSubmit</a></li>
    </ul>

    <div class="tab-content">
        <div id="home" class="tab-pane fade in active">
            <h3>@Resources.Resources.Description</h3>
            <div id="description">
                @Html.DisplayFor(modelItem => Model.Description)
                @Html.HiddenFor(model => model.ID)
                @Html.HiddenFor(model => model.Title)
                @Html.HiddenFor(model => model.CourseID)

                @for (int i = 1; i < Model.Milestones.Count; i++)
                {
                    <h4>@i. @Html.DisplayFor(model => model.Milestones[i].Title) (@Html.DisplayFor(model => model.Milestones[i].Weight)%)</h4>
                    <p>@Html.DisplayFor(model => model.Milestones[i].Description)</p>

                }
            </div>
            @if (!Model.IsTeacher)
            {
                using (Html.BeginForm("SubmitSolution", "Solution", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.HiddenFor(modelItem => Model.Description)
                    @Html.HiddenFor(model => model.ID)
                    @Html.HiddenFor(model => model.Title)
                    @Html.HiddenFor(model => model.CourseID)
                    <div class="form-group">
                        @Html.LabelFor(model => model.milestoneSubmissionID, "Milestone", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.milestoneSubmissionID, Model.milestoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.milestoneSubmissionID, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.File, @Resources.Resources.File, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(model => model.File, new { type = "file" })
                            @Html.ValidationMessageFor(model => model.File, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value=@Resources.Resources.Save id="fileButton" class="btn btn-default" />
                        </div>
                    </div>
                }
            }
            @if (Model.IsTeacher)
            {
                <div class="col-md-10">
                    @Html.ActionLink(@Resources.Resources.Edit, "Edit", new { id = Model.ID }, htmlAttributes: new { @class = "btn btn-default", @role = "button" })
                </div>
            }
        </div>
        <div id="menu1" class="tab-pane fade">
            @if (!Model.IsTeacher)
            {
                using (Html.BeginForm("SubmitSolution", "Solution", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    <section>
                        <div id="editor">
                        </div>
                    </section>
                    @Html.HiddenFor(model => model.ID)
                    @Html.HiddenFor(model => model.Title)
                    @Html.HiddenFor(model => model.CourseID)
                    @Html.HiddenFor(model => model.Solution)
                    <div class="form-group">
                        @Html.LabelFor(model => model.milestoneSubmissionID, @Resources.Resources.Milestone, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.milestoneSubmissionID, Model.milestoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.milestoneSubmissionID, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value=@Resources.Resources.Save id="solutionButton" class="btn btn-default" />
                        </div>
                    </div>
                }

            }
        </div>
    </div>
</div>

<div>
    @Html.ActionLink(@Resources.Resources.BackButton, "Index", new { Style = "color:White" }, htmlAttributes: new { @class = "btn btn-default", @role = "button", @style = "color:#f00" })
</div>


<script type="text/javascript">
    var editor = ace.edit("editor");
    var ccppMode = require("ace/mode/c_cpp").Mode;
    editor.getSession().setMode(new ccppMode());
</script>

<script type="text/javascript">
    $('#solutionButton').click(function () {
        $('#File').val("");
    }
    );
</script>

<script type="text/javascript">
    $('#fileButton').click(function () {
        $('#Solution').val("");
    }
    );
</script>

