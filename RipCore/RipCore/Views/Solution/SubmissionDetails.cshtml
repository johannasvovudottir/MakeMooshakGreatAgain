@model RipCore.Models.ViewModels.SubmissionViewModel
<h3>@Model.MilestoneName</h3>
<h3>@Model.UsersName</h3>
<p>@Model.IsAccepted</p>
<section>
    <div id="editor">
        @Model.Code
    </div>
</section>
<script type="text/javascript">
    var editor = ace.edit("editor");
    //editor.setTheme("ace/theme/twilight");
   // editor.getSession().setMode("ace/mode/c#");
</script>
<div class="form-horizontal">
    <hr />
    <div class="form-group">
        @Html.LabelFor(model => model.ExpectedOutput, "Expected Output", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DisplayFor(model => model.ExpectedOutput)
            @Html.ValidationMessageFor(model => model.ExpectedOutput, "", new { @class = "text-danger" })
        </div>
    </div>
    @if (!Model.IsTeacher)
    {
        <div class="form-group">
            @Html.LabelFor(model => model.SolutionOutput, "Your Output", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.SolutionOutput)
                @Html.ValidationMessageFor(model => model.SolutionOutput, "", new { @class = "text-danger" })
            </div>
        </div>
        if (Model.Grade != 0)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Grade, "Grade", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DisplayFor(model => model.Grade)
                    @Html.ValidationMessageFor(model => model.Grade, "", new { @class = "text-danger" })
                </div>
            </div>
        }
    }
    @if (Model.IsTeacher)
    {
        <div class="form-group">
            @Html.LabelFor(model => model.SolutionOutput, "Obtained Output", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.SolutionOutput)
                @Html.ValidationMessageFor(model => model.SolutionOutput, "", new { @class = "text-danger" })
            </div>
        </div>
        using (Html.BeginForm("SubmitGrade", "Solution", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.ID)
            @Html.HiddenFor(model => model.IsAccepted)
            @Html.HiddenFor(model => model.MilestoneID)
            @Html.HiddenFor(model => model.SolutionOutput)
            @Html.HiddenFor(model => model.ExpectedOutput)
            @Html.HiddenFor(model => model.SolutionOutput)
            <div class="form-group">
                @Html.LabelFor(model => model.Grade, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Grade, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Grade, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" id="formSubmit" class="btn btn-default" />
                </div>
            </div>
        }
    }

    </div>
